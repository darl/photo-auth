{"version":3,"sources":["logo.svg","App.js","VideoFrame.js","serviceWorker.js","index.js"],"names":["module","exports","App","pc","setVideoElement","elem","videoElement","RTCPeerConnection","sdpSemantics","addEventListener","console","log","createDataChannel","this","setAttribute","navigator","mediaDevices","getUserMedia","audio","video","stream","getTracks","forEach","track","addTrack","srcObject","createOffer","then","offer","setLocalDescription","Promise","resolve","iceGatheringState","checkState","removeEventListener","localDescription","fetch","body","JSON","stringify","sdp","type","video_transform","headers","method","className","ref","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,0LCyB5BC,ICtBXC,E,mDAwFWD,G,kBAnFX,aAAe,IAAD,8BACV,+CAEKE,gBAAkB,SAAAC,GACnB,EAAKC,aAAeD,GAJd,E,gKAcVF,EAAK,IAAII,kBAHI,CACTC,aAAc,kBAIfC,iBAAiB,0BAA2BC,QAAQC,KAAK,GAC5DR,EAAGM,iBAAiB,2BAA4BC,QAAQC,KAAK,GAC7DR,EAAGM,iBAAiB,uBAAwBC,QAAQC,KAAK,GAGpDR,EAAGS,kBAAkB,OAAQ,CAAC,SAAW,IAC3CH,iBAAiB,UAAWC,QAAQC,KAEvCE,KAAKP,aAAaQ,aAAa,WAAY,IAC3CD,KAAKP,aAAaQ,aAAa,QAAS,IACxCD,KAAKP,aAAaQ,aAAa,cAAe,I,oBAEzBC,UAAUC,aAAaC,aAAa,CAACC,OAAO,EAAOC,OAAO,K,SAAzEC,E,QACCC,YAAYC,SAAQ,SAASC,GAChCpB,EAAGqB,SAASD,EAAOH,MAEvBP,KAAKP,aAAamB,UAAYL,EAE9BjB,EACKuB,cACAC,MAAK,SAACC,GAAD,OAAWzB,EAAG0B,oBAAoBD,MACvCD,MAAK,kBAAM,IAAIG,SAAQ,SAACC,GACrB,GAA6B,aAAzB5B,EAAG6B,kBACHD,QACG,CASH5B,EAAGM,iBAAiB,2BARD,SAAbwB,IACFvB,QAAQC,IAAI,gBACiB,aAAzBR,EAAG6B,oBACH7B,EAAG+B,oBAAoB,0BAA2BD,GAClDF,eAOfJ,MAAK,WACF,IAAMC,EAAQzB,EAAGgC,iBAEjB,OAAOC,MAAM,yBAA0B,CACnCC,KAAMC,KAAKC,UAAU,CACjBC,IAAKZ,EAAMY,IACXC,KAAMb,EAAMa,KACZC,gBAAiB,SAErBC,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,Y,iFAQpB,OACI,yBAAKC,UAAU,cACX,2BAAOC,IAAMjC,KAAKT,gBAAkByC,UAAU,sBAC9C,yBAAKA,UAAU,uBAAf,a,GA5EEE,IAAMC,gBCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD4HlD,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.3f898fd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport './VideoFrame.css';\n\nlet pc;\nlet dc;\n\n\nclass App extends React.PureComponent {\n    constructor() {\n        super();\n\n        this.setVideoElement = elem => {\n            this.videoElement = elem;\n        }\n    }\n\n    async componentDidMount() {\n\n        // Create Peer Connection\n        var config = {\n            sdpSemantics: 'unified-plan'\n        };\n        pc = new RTCPeerConnection(config);\n        // register some listeners to help debugging\n        pc.addEventListener('icegatheringstatechange', console.log, false);\n        pc.addEventListener('iceconnectionstatechange', console.log, false);\n        pc.addEventListener('signalingstatechange', console.log, false);\n\n        // DATA chanel\n        dc = pc.createDataChannel('chat', {\"ordered\": true});\n        dc.addEventListener('message', console.log);\n\n        this.videoElement.setAttribute('autoplay', '');\n        this.videoElement.setAttribute('muted', '');\n        this.videoElement.setAttribute('playsinline', '');\n\n        const stream = await navigator.mediaDevices.getUserMedia({audio: false, video: true});\n        stream.getTracks().forEach(function(track) {\n            pc.addTrack(track, stream);\n        });\n        this.videoElement.srcObject = stream;\n\n        pc\n            .createOffer()\n            .then((offer) => pc.setLocalDescription(offer))\n            .then(() => new Promise((resolve) => {\n                if (pc.iceGatheringState === 'complete') {\n                    resolve();\n                } else {\n                    const checkState = () => {\n                        console.log('STATE CHANGE');\n                        if (pc.iceGatheringState === 'complete') {\n                            pc.removeEventListener('icegatheringstatechange', checkState);\n                            resolve();\n                        }\n                    }\n\n                    pc.addEventListener('icegatheringstatechange', checkState)\n                }\n            }))\n            .then(() => {\n                const offer = pc.localDescription;\n\n                return fetch('//localhost:8080/offer', {\n                    body: JSON.stringify({\n                        sdp: offer.sdp,\n                        type: offer.type,\n                        video_transform: 'none',\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    method: 'POST',\n                })\n            });\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"VideoFrame\">\n                <video ref={ this.setVideoElement } className=\"VideoFrame__video\" />\n                <div className=\"VideoFrame__overlay\">\n                    test\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport VideoFrame from './VideoFrame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<VideoFrame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}